// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

package io.axoniq.axonserver.grpc.control;

/**
 * <pre>
 * An instruction from Application Node to the AxonServer platform 
 * </pre>
 *
 * Protobuf type {@code io.axoniq.axonserver.grpc.control.PlatformInboundInstruction}
 */
public  final class PlatformInboundInstruction extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:io.axoniq.axonserver.grpc.control.PlatformInboundInstruction)
    PlatformInboundInstructionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PlatformInboundInstruction.newBuilder() to construct.
  private PlatformInboundInstruction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PlatformInboundInstruction() {
    instructionId_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private PlatformInboundInstruction(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            io.axoniq.axonserver.grpc.control.ClientIdentification.Builder subBuilder = null;
            if (requestCase_ == 1) {
              subBuilder = ((io.axoniq.axonserver.grpc.control.ClientIdentification) request_).toBuilder();
            }
            request_ =
                input.readMessage(io.axoniq.axonserver.grpc.control.ClientIdentification.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.axoniq.axonserver.grpc.control.ClientIdentification) request_);
              request_ = subBuilder.buildPartial();
            }
            requestCase_ = 1;
            break;
          }
          case 18: {
            io.axoniq.axonserver.grpc.control.EventProcessorInfo.Builder subBuilder = null;
            if (requestCase_ == 2) {
              subBuilder = ((io.axoniq.axonserver.grpc.control.EventProcessorInfo) request_).toBuilder();
            }
            request_ =
                input.readMessage(io.axoniq.axonserver.grpc.control.EventProcessorInfo.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.axoniq.axonserver.grpc.control.EventProcessorInfo) request_);
              request_ = subBuilder.buildPartial();
            }
            requestCase_ = 2;
            break;
          }
          case 26: {
            io.axoniq.axonserver.grpc.control.Heartbeat.Builder subBuilder = null;
            if (requestCase_ == 3) {
              subBuilder = ((io.axoniq.axonserver.grpc.control.Heartbeat) request_).toBuilder();
            }
            request_ =
                input.readMessage(io.axoniq.axonserver.grpc.control.Heartbeat.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.axoniq.axonserver.grpc.control.Heartbeat) request_);
              request_ = subBuilder.buildPartial();
            }
            requestCase_ = 3;
            break;
          }
          case 34: {
            io.axoniq.axonserver.grpc.InstructionAck.Builder subBuilder = null;
            if (requestCase_ == 4) {
              subBuilder = ((io.axoniq.axonserver.grpc.InstructionAck) request_).toBuilder();
            }
            request_ =
                input.readMessage(io.axoniq.axonserver.grpc.InstructionAck.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.axoniq.axonserver.grpc.InstructionAck) request_);
              request_ = subBuilder.buildPartial();
            }
            requestCase_ = 4;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            instructionId_ = s;
            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.axoniq.axonserver.grpc.control.Control.internal_static_io_axoniq_axonserver_grpc_control_PlatformInboundInstruction_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.axoniq.axonserver.grpc.control.Control.internal_static_io_axoniq_axonserver_grpc_control_PlatformInboundInstruction_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.class, io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.Builder.class);
  }

  private int requestCase_ = 0;
  private java.lang.Object request_;
  public enum RequestCase
      implements com.google.protobuf.Internal.EnumLite {
    REGISTER(1),
    EVENT_PROCESSOR_INFO(2),
    HEARTBEAT(3),
    ACK(4),
    REQUEST_NOT_SET(0);
    private final int value;
    private RequestCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RequestCase valueOf(int value) {
      return forNumber(value);
    }

    public static RequestCase forNumber(int value) {
      switch (value) {
        case 1: return REGISTER;
        case 2: return EVENT_PROCESSOR_INFO;
        case 3: return HEARTBEAT;
        case 4: return ACK;
        case 0: return REQUEST_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public RequestCase
  getRequestCase() {
    return RequestCase.forNumber(
        requestCase_);
  }

  public static final int REGISTER_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Information about the client being connected.
   *This information is used by AxonServer to monitor the topology of connected applications.
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.ClientIdentification register = 1;</code>
   */
  public boolean hasRegister() {
    return requestCase_ == 1;
  }
  /**
   * <pre>
   * Information about the client being connected.
   *This information is used by AxonServer to monitor the topology of connected applications.
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.ClientIdentification register = 1;</code>
   */
  public io.axoniq.axonserver.grpc.control.ClientIdentification getRegister() {
    if (requestCase_ == 1) {
       return (io.axoniq.axonserver.grpc.control.ClientIdentification) request_;
    }
    return io.axoniq.axonserver.grpc.control.ClientIdentification.getDefaultInstance();
  }
  /**
   * <pre>
   * Information about the client being connected.
   *This information is used by AxonServer to monitor the topology of connected applications.
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.ClientIdentification register = 1;</code>
   */
  public io.axoniq.axonserver.grpc.control.ClientIdentificationOrBuilder getRegisterOrBuilder() {
    if (requestCase_ == 1) {
       return (io.axoniq.axonserver.grpc.control.ClientIdentification) request_;
    }
    return io.axoniq.axonserver.grpc.control.ClientIdentification.getDefaultInstance();
  }

  public static final int EVENT_PROCESSOR_INFO_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Information about Tracking Processors defined in the application.
   *This information is used by AxonServer to monitor the progress of Tracking Processors across instances.
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;</code>
   */
  public boolean hasEventProcessorInfo() {
    return requestCase_ == 2;
  }
  /**
   * <pre>
   * Information about Tracking Processors defined in the application.
   *This information is used by AxonServer to monitor the progress of Tracking Processors across instances.
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;</code>
   */
  public io.axoniq.axonserver.grpc.control.EventProcessorInfo getEventProcessorInfo() {
    if (requestCase_ == 2) {
       return (io.axoniq.axonserver.grpc.control.EventProcessorInfo) request_;
    }
    return io.axoniq.axonserver.grpc.control.EventProcessorInfo.getDefaultInstance();
  }
  /**
   * <pre>
   * Information about Tracking Processors defined in the application.
   *This information is used by AxonServer to monitor the progress of Tracking Processors across instances.
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;</code>
   */
  public io.axoniq.axonserver.grpc.control.EventProcessorInfoOrBuilder getEventProcessorInfoOrBuilder() {
    if (requestCase_ == 2) {
       return (io.axoniq.axonserver.grpc.control.EventProcessorInfo) request_;
    }
    return io.axoniq.axonserver.grpc.control.EventProcessorInfo.getDefaultInstance();
  }

  public static final int HEARTBEAT_FIELD_NUMBER = 3;
  /**
   * <pre>
   * This heartbeat is used by AxonServer in order to check if the connection is still alive
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 3;</code>
   */
  public boolean hasHeartbeat() {
    return requestCase_ == 3;
  }
  /**
   * <pre>
   * This heartbeat is used by AxonServer in order to check if the connection is still alive
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 3;</code>
   */
  public io.axoniq.axonserver.grpc.control.Heartbeat getHeartbeat() {
    if (requestCase_ == 3) {
       return (io.axoniq.axonserver.grpc.control.Heartbeat) request_;
    }
    return io.axoniq.axonserver.grpc.control.Heartbeat.getDefaultInstance();
  }
  /**
   * <pre>
   * This heartbeat is used by AxonServer in order to check if the connection is still alive
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 3;</code>
   */
  public io.axoniq.axonserver.grpc.control.HeartbeatOrBuilder getHeartbeatOrBuilder() {
    if (requestCase_ == 3) {
       return (io.axoniq.axonserver.grpc.control.Heartbeat) request_;
    }
    return io.axoniq.axonserver.grpc.control.Heartbeat.getDefaultInstance();
  }

  public static final int ACK_FIELD_NUMBER = 4;
  /**
   * <pre>
   * Acknowledgement of previously sent instruction via outbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 4;</code>
   */
  public boolean hasAck() {
    return requestCase_ == 4;
  }
  /**
   * <pre>
   * Acknowledgement of previously sent instruction via outbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 4;</code>
   */
  public io.axoniq.axonserver.grpc.InstructionAck getAck() {
    if (requestCase_ == 4) {
       return (io.axoniq.axonserver.grpc.InstructionAck) request_;
    }
    return io.axoniq.axonserver.grpc.InstructionAck.getDefaultInstance();
  }
  /**
   * <pre>
   * Acknowledgement of previously sent instruction via outbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 4;</code>
   */
  public io.axoniq.axonserver.grpc.InstructionAckOrBuilder getAckOrBuilder() {
    if (requestCase_ == 4) {
       return (io.axoniq.axonserver.grpc.InstructionAck) request_;
    }
    return io.axoniq.axonserver.grpc.InstructionAck.getDefaultInstance();
  }

  public static final int INSTRUCTION_ID_FIELD_NUMBER = 5;
  private volatile java.lang.Object instructionId_;
  /**
   * <pre>
   * Instruction identifier. If this identifier is set, this instruction will be acknowledged via outbound stream 
   * </pre>
   *
   * <code>string instruction_id = 5;</code>
   */
  public java.lang.String getInstructionId() {
    java.lang.Object ref = instructionId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      instructionId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Instruction identifier. If this identifier is set, this instruction will be acknowledged via outbound stream 
   * </pre>
   *
   * <code>string instruction_id = 5;</code>
   */
  public com.google.protobuf.ByteString
      getInstructionIdBytes() {
    java.lang.Object ref = instructionId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      instructionId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (requestCase_ == 1) {
      output.writeMessage(1, (io.axoniq.axonserver.grpc.control.ClientIdentification) request_);
    }
    if (requestCase_ == 2) {
      output.writeMessage(2, (io.axoniq.axonserver.grpc.control.EventProcessorInfo) request_);
    }
    if (requestCase_ == 3) {
      output.writeMessage(3, (io.axoniq.axonserver.grpc.control.Heartbeat) request_);
    }
    if (requestCase_ == 4) {
      output.writeMessage(4, (io.axoniq.axonserver.grpc.InstructionAck) request_);
    }
    if (!getInstructionIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, instructionId_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (requestCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (io.axoniq.axonserver.grpc.control.ClientIdentification) request_);
    }
    if (requestCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (io.axoniq.axonserver.grpc.control.EventProcessorInfo) request_);
    }
    if (requestCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (io.axoniq.axonserver.grpc.control.Heartbeat) request_);
    }
    if (requestCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (io.axoniq.axonserver.grpc.InstructionAck) request_);
    }
    if (!getInstructionIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, instructionId_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.axoniq.axonserver.grpc.control.PlatformInboundInstruction)) {
      return super.equals(obj);
    }
    io.axoniq.axonserver.grpc.control.PlatformInboundInstruction other = (io.axoniq.axonserver.grpc.control.PlatformInboundInstruction) obj;

    boolean result = true;
    result = result && getInstructionId()
        .equals(other.getInstructionId());
    result = result && getRequestCase().equals(
        other.getRequestCase());
    if (!result) return false;
    switch (requestCase_) {
      case 1:
        result = result && getRegister()
            .equals(other.getRegister());
        break;
      case 2:
        result = result && getEventProcessorInfo()
            .equals(other.getEventProcessorInfo());
        break;
      case 3:
        result = result && getHeartbeat()
            .equals(other.getHeartbeat());
        break;
      case 4:
        result = result && getAck()
            .equals(other.getAck());
        break;
      case 0:
      default:
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + INSTRUCTION_ID_FIELD_NUMBER;
    hash = (53 * hash) + getInstructionId().hashCode();
    switch (requestCase_) {
      case 1:
        hash = (37 * hash) + REGISTER_FIELD_NUMBER;
        hash = (53 * hash) + getRegister().hashCode();
        break;
      case 2:
        hash = (37 * hash) + EVENT_PROCESSOR_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getEventProcessorInfo().hashCode();
        break;
      case 3:
        hash = (37 * hash) + HEARTBEAT_FIELD_NUMBER;
        hash = (53 * hash) + getHeartbeat().hashCode();
        break;
      case 4:
        hash = (37 * hash) + ACK_FIELD_NUMBER;
        hash = (53 * hash) + getAck().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.axoniq.axonserver.grpc.control.PlatformInboundInstruction parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.axoniq.axonserver.grpc.control.PlatformInboundInstruction parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.axoniq.axonserver.grpc.control.PlatformInboundInstruction parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.axoniq.axonserver.grpc.control.PlatformInboundInstruction parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.axoniq.axonserver.grpc.control.PlatformInboundInstruction parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.axoniq.axonserver.grpc.control.PlatformInboundInstruction parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.axoniq.axonserver.grpc.control.PlatformInboundInstruction parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.axoniq.axonserver.grpc.control.PlatformInboundInstruction parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.axoniq.axonserver.grpc.control.PlatformInboundInstruction parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.axoniq.axonserver.grpc.control.PlatformInboundInstruction parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.axoniq.axonserver.grpc.control.PlatformInboundInstruction parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.axoniq.axonserver.grpc.control.PlatformInboundInstruction parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.axoniq.axonserver.grpc.control.PlatformInboundInstruction prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * An instruction from Application Node to the AxonServer platform 
   * </pre>
   *
   * Protobuf type {@code io.axoniq.axonserver.grpc.control.PlatformInboundInstruction}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:io.axoniq.axonserver.grpc.control.PlatformInboundInstruction)
      io.axoniq.axonserver.grpc.control.PlatformInboundInstructionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.axoniq.axonserver.grpc.control.Control.internal_static_io_axoniq_axonserver_grpc_control_PlatformInboundInstruction_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.axoniq.axonserver.grpc.control.Control.internal_static_io_axoniq_axonserver_grpc_control_PlatformInboundInstruction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.class, io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.Builder.class);
    }

    // Construct using io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      instructionId_ = "";

      requestCase_ = 0;
      request_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.axoniq.axonserver.grpc.control.Control.internal_static_io_axoniq_axonserver_grpc_control_PlatformInboundInstruction_descriptor;
    }

    @java.lang.Override
    public io.axoniq.axonserver.grpc.control.PlatformInboundInstruction getDefaultInstanceForType() {
      return io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.getDefaultInstance();
    }

    @java.lang.Override
    public io.axoniq.axonserver.grpc.control.PlatformInboundInstruction build() {
      io.axoniq.axonserver.grpc.control.PlatformInboundInstruction result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.axoniq.axonserver.grpc.control.PlatformInboundInstruction buildPartial() {
      io.axoniq.axonserver.grpc.control.PlatformInboundInstruction result = new io.axoniq.axonserver.grpc.control.PlatformInboundInstruction(this);
      if (requestCase_ == 1) {
        if (registerBuilder_ == null) {
          result.request_ = request_;
        } else {
          result.request_ = registerBuilder_.build();
        }
      }
      if (requestCase_ == 2) {
        if (eventProcessorInfoBuilder_ == null) {
          result.request_ = request_;
        } else {
          result.request_ = eventProcessorInfoBuilder_.build();
        }
      }
      if (requestCase_ == 3) {
        if (heartbeatBuilder_ == null) {
          result.request_ = request_;
        } else {
          result.request_ = heartbeatBuilder_.build();
        }
      }
      if (requestCase_ == 4) {
        if (ackBuilder_ == null) {
          result.request_ = request_;
        } else {
          result.request_ = ackBuilder_.build();
        }
      }
      result.instructionId_ = instructionId_;
      result.requestCase_ = requestCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.axoniq.axonserver.grpc.control.PlatformInboundInstruction) {
        return mergeFrom((io.axoniq.axonserver.grpc.control.PlatformInboundInstruction)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.axoniq.axonserver.grpc.control.PlatformInboundInstruction other) {
      if (other == io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.getDefaultInstance()) return this;
      if (!other.getInstructionId().isEmpty()) {
        instructionId_ = other.instructionId_;
        onChanged();
      }
      switch (other.getRequestCase()) {
        case REGISTER: {
          mergeRegister(other.getRegister());
          break;
        }
        case EVENT_PROCESSOR_INFO: {
          mergeEventProcessorInfo(other.getEventProcessorInfo());
          break;
        }
        case HEARTBEAT: {
          mergeHeartbeat(other.getHeartbeat());
          break;
        }
        case ACK: {
          mergeAck(other.getAck());
          break;
        }
        case REQUEST_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.axoniq.axonserver.grpc.control.PlatformInboundInstruction parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.axoniq.axonserver.grpc.control.PlatformInboundInstruction) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int requestCase_ = 0;
    private java.lang.Object request_;
    public RequestCase
        getRequestCase() {
      return RequestCase.forNumber(
          requestCase_);
    }

    public Builder clearRequest() {
      requestCase_ = 0;
      request_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        io.axoniq.axonserver.grpc.control.ClientIdentification, io.axoniq.axonserver.grpc.control.ClientIdentification.Builder, io.axoniq.axonserver.grpc.control.ClientIdentificationOrBuilder> registerBuilder_;
    /**
     * <pre>
     * Information about the client being connected.
     *This information is used by AxonServer to monitor the topology of connected applications.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.ClientIdentification register = 1;</code>
     */
    public boolean hasRegister() {
      return requestCase_ == 1;
    }
    /**
     * <pre>
     * Information about the client being connected.
     *This information is used by AxonServer to monitor the topology of connected applications.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.ClientIdentification register = 1;</code>
     */
    public io.axoniq.axonserver.grpc.control.ClientIdentification getRegister() {
      if (registerBuilder_ == null) {
        if (requestCase_ == 1) {
          return (io.axoniq.axonserver.grpc.control.ClientIdentification) request_;
        }
        return io.axoniq.axonserver.grpc.control.ClientIdentification.getDefaultInstance();
      } else {
        if (requestCase_ == 1) {
          return registerBuilder_.getMessage();
        }
        return io.axoniq.axonserver.grpc.control.ClientIdentification.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Information about the client being connected.
     *This information is used by AxonServer to monitor the topology of connected applications.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.ClientIdentification register = 1;</code>
     */
    public Builder setRegister(io.axoniq.axonserver.grpc.control.ClientIdentification value) {
      if (registerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        request_ = value;
        onChanged();
      } else {
        registerBuilder_.setMessage(value);
      }
      requestCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Information about the client being connected.
     *This information is used by AxonServer to monitor the topology of connected applications.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.ClientIdentification register = 1;</code>
     */
    public Builder setRegister(
        io.axoniq.axonserver.grpc.control.ClientIdentification.Builder builderForValue) {
      if (registerBuilder_ == null) {
        request_ = builderForValue.build();
        onChanged();
      } else {
        registerBuilder_.setMessage(builderForValue.build());
      }
      requestCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Information about the client being connected.
     *This information is used by AxonServer to monitor the topology of connected applications.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.ClientIdentification register = 1;</code>
     */
    public Builder mergeRegister(io.axoniq.axonserver.grpc.control.ClientIdentification value) {
      if (registerBuilder_ == null) {
        if (requestCase_ == 1 &&
            request_ != io.axoniq.axonserver.grpc.control.ClientIdentification.getDefaultInstance()) {
          request_ = io.axoniq.axonserver.grpc.control.ClientIdentification.newBuilder((io.axoniq.axonserver.grpc.control.ClientIdentification) request_)
              .mergeFrom(value).buildPartial();
        } else {
          request_ = value;
        }
        onChanged();
      } else {
        if (requestCase_ == 1) {
          registerBuilder_.mergeFrom(value);
        }
        registerBuilder_.setMessage(value);
      }
      requestCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Information about the client being connected.
     *This information is used by AxonServer to monitor the topology of connected applications.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.ClientIdentification register = 1;</code>
     */
    public Builder clearRegister() {
      if (registerBuilder_ == null) {
        if (requestCase_ == 1) {
          requestCase_ = 0;
          request_ = null;
          onChanged();
        }
      } else {
        if (requestCase_ == 1) {
          requestCase_ = 0;
          request_ = null;
        }
        registerBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Information about the client being connected.
     *This information is used by AxonServer to monitor the topology of connected applications.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.ClientIdentification register = 1;</code>
     */
    public io.axoniq.axonserver.grpc.control.ClientIdentification.Builder getRegisterBuilder() {
      return getRegisterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Information about the client being connected.
     *This information is used by AxonServer to monitor the topology of connected applications.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.ClientIdentification register = 1;</code>
     */
    public io.axoniq.axonserver.grpc.control.ClientIdentificationOrBuilder getRegisterOrBuilder() {
      if ((requestCase_ == 1) && (registerBuilder_ != null)) {
        return registerBuilder_.getMessageOrBuilder();
      } else {
        if (requestCase_ == 1) {
          return (io.axoniq.axonserver.grpc.control.ClientIdentification) request_;
        }
        return io.axoniq.axonserver.grpc.control.ClientIdentification.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Information about the client being connected.
     *This information is used by AxonServer to monitor the topology of connected applications.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.ClientIdentification register = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.axoniq.axonserver.grpc.control.ClientIdentification, io.axoniq.axonserver.grpc.control.ClientIdentification.Builder, io.axoniq.axonserver.grpc.control.ClientIdentificationOrBuilder> 
        getRegisterFieldBuilder() {
      if (registerBuilder_ == null) {
        if (!(requestCase_ == 1)) {
          request_ = io.axoniq.axonserver.grpc.control.ClientIdentification.getDefaultInstance();
        }
        registerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.axoniq.axonserver.grpc.control.ClientIdentification, io.axoniq.axonserver.grpc.control.ClientIdentification.Builder, io.axoniq.axonserver.grpc.control.ClientIdentificationOrBuilder>(
                (io.axoniq.axonserver.grpc.control.ClientIdentification) request_,
                getParentForChildren(),
                isClean());
        request_ = null;
      }
      requestCase_ = 1;
      onChanged();;
      return registerBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.axoniq.axonserver.grpc.control.EventProcessorInfo, io.axoniq.axonserver.grpc.control.EventProcessorInfo.Builder, io.axoniq.axonserver.grpc.control.EventProcessorInfoOrBuilder> eventProcessorInfoBuilder_;
    /**
     * <pre>
     * Information about Tracking Processors defined in the application.
     *This information is used by AxonServer to monitor the progress of Tracking Processors across instances.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;</code>
     */
    public boolean hasEventProcessorInfo() {
      return requestCase_ == 2;
    }
    /**
     * <pre>
     * Information about Tracking Processors defined in the application.
     *This information is used by AxonServer to monitor the progress of Tracking Processors across instances.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;</code>
     */
    public io.axoniq.axonserver.grpc.control.EventProcessorInfo getEventProcessorInfo() {
      if (eventProcessorInfoBuilder_ == null) {
        if (requestCase_ == 2) {
          return (io.axoniq.axonserver.grpc.control.EventProcessorInfo) request_;
        }
        return io.axoniq.axonserver.grpc.control.EventProcessorInfo.getDefaultInstance();
      } else {
        if (requestCase_ == 2) {
          return eventProcessorInfoBuilder_.getMessage();
        }
        return io.axoniq.axonserver.grpc.control.EventProcessorInfo.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Information about Tracking Processors defined in the application.
     *This information is used by AxonServer to monitor the progress of Tracking Processors across instances.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;</code>
     */
    public Builder setEventProcessorInfo(io.axoniq.axonserver.grpc.control.EventProcessorInfo value) {
      if (eventProcessorInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        request_ = value;
        onChanged();
      } else {
        eventProcessorInfoBuilder_.setMessage(value);
      }
      requestCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Information about Tracking Processors defined in the application.
     *This information is used by AxonServer to monitor the progress of Tracking Processors across instances.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;</code>
     */
    public Builder setEventProcessorInfo(
        io.axoniq.axonserver.grpc.control.EventProcessorInfo.Builder builderForValue) {
      if (eventProcessorInfoBuilder_ == null) {
        request_ = builderForValue.build();
        onChanged();
      } else {
        eventProcessorInfoBuilder_.setMessage(builderForValue.build());
      }
      requestCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Information about Tracking Processors defined in the application.
     *This information is used by AxonServer to monitor the progress of Tracking Processors across instances.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;</code>
     */
    public Builder mergeEventProcessorInfo(io.axoniq.axonserver.grpc.control.EventProcessorInfo value) {
      if (eventProcessorInfoBuilder_ == null) {
        if (requestCase_ == 2 &&
            request_ != io.axoniq.axonserver.grpc.control.EventProcessorInfo.getDefaultInstance()) {
          request_ = io.axoniq.axonserver.grpc.control.EventProcessorInfo.newBuilder((io.axoniq.axonserver.grpc.control.EventProcessorInfo) request_)
              .mergeFrom(value).buildPartial();
        } else {
          request_ = value;
        }
        onChanged();
      } else {
        if (requestCase_ == 2) {
          eventProcessorInfoBuilder_.mergeFrom(value);
        }
        eventProcessorInfoBuilder_.setMessage(value);
      }
      requestCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Information about Tracking Processors defined in the application.
     *This information is used by AxonServer to monitor the progress of Tracking Processors across instances.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;</code>
     */
    public Builder clearEventProcessorInfo() {
      if (eventProcessorInfoBuilder_ == null) {
        if (requestCase_ == 2) {
          requestCase_ = 0;
          request_ = null;
          onChanged();
        }
      } else {
        if (requestCase_ == 2) {
          requestCase_ = 0;
          request_ = null;
        }
        eventProcessorInfoBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Information about Tracking Processors defined in the application.
     *This information is used by AxonServer to monitor the progress of Tracking Processors across instances.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;</code>
     */
    public io.axoniq.axonserver.grpc.control.EventProcessorInfo.Builder getEventProcessorInfoBuilder() {
      return getEventProcessorInfoFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Information about Tracking Processors defined in the application.
     *This information is used by AxonServer to monitor the progress of Tracking Processors across instances.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;</code>
     */
    public io.axoniq.axonserver.grpc.control.EventProcessorInfoOrBuilder getEventProcessorInfoOrBuilder() {
      if ((requestCase_ == 2) && (eventProcessorInfoBuilder_ != null)) {
        return eventProcessorInfoBuilder_.getMessageOrBuilder();
      } else {
        if (requestCase_ == 2) {
          return (io.axoniq.axonserver.grpc.control.EventProcessorInfo) request_;
        }
        return io.axoniq.axonserver.grpc.control.EventProcessorInfo.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Information about Tracking Processors defined in the application.
     *This information is used by AxonServer to monitor the progress of Tracking Processors across instances.
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.axoniq.axonserver.grpc.control.EventProcessorInfo, io.axoniq.axonserver.grpc.control.EventProcessorInfo.Builder, io.axoniq.axonserver.grpc.control.EventProcessorInfoOrBuilder> 
        getEventProcessorInfoFieldBuilder() {
      if (eventProcessorInfoBuilder_ == null) {
        if (!(requestCase_ == 2)) {
          request_ = io.axoniq.axonserver.grpc.control.EventProcessorInfo.getDefaultInstance();
        }
        eventProcessorInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.axoniq.axonserver.grpc.control.EventProcessorInfo, io.axoniq.axonserver.grpc.control.EventProcessorInfo.Builder, io.axoniq.axonserver.grpc.control.EventProcessorInfoOrBuilder>(
                (io.axoniq.axonserver.grpc.control.EventProcessorInfo) request_,
                getParentForChildren(),
                isClean());
        request_ = null;
      }
      requestCase_ = 2;
      onChanged();;
      return eventProcessorInfoBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.axoniq.axonserver.grpc.control.Heartbeat, io.axoniq.axonserver.grpc.control.Heartbeat.Builder, io.axoniq.axonserver.grpc.control.HeartbeatOrBuilder> heartbeatBuilder_;
    /**
     * <pre>
     * This heartbeat is used by AxonServer in order to check if the connection is still alive
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 3;</code>
     */
    public boolean hasHeartbeat() {
      return requestCase_ == 3;
    }
    /**
     * <pre>
     * This heartbeat is used by AxonServer in order to check if the connection is still alive
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 3;</code>
     */
    public io.axoniq.axonserver.grpc.control.Heartbeat getHeartbeat() {
      if (heartbeatBuilder_ == null) {
        if (requestCase_ == 3) {
          return (io.axoniq.axonserver.grpc.control.Heartbeat) request_;
        }
        return io.axoniq.axonserver.grpc.control.Heartbeat.getDefaultInstance();
      } else {
        if (requestCase_ == 3) {
          return heartbeatBuilder_.getMessage();
        }
        return io.axoniq.axonserver.grpc.control.Heartbeat.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * This heartbeat is used by AxonServer in order to check if the connection is still alive
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 3;</code>
     */
    public Builder setHeartbeat(io.axoniq.axonserver.grpc.control.Heartbeat value) {
      if (heartbeatBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        request_ = value;
        onChanged();
      } else {
        heartbeatBuilder_.setMessage(value);
      }
      requestCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * This heartbeat is used by AxonServer in order to check if the connection is still alive
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 3;</code>
     */
    public Builder setHeartbeat(
        io.axoniq.axonserver.grpc.control.Heartbeat.Builder builderForValue) {
      if (heartbeatBuilder_ == null) {
        request_ = builderForValue.build();
        onChanged();
      } else {
        heartbeatBuilder_.setMessage(builderForValue.build());
      }
      requestCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * This heartbeat is used by AxonServer in order to check if the connection is still alive
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 3;</code>
     */
    public Builder mergeHeartbeat(io.axoniq.axonserver.grpc.control.Heartbeat value) {
      if (heartbeatBuilder_ == null) {
        if (requestCase_ == 3 &&
            request_ != io.axoniq.axonserver.grpc.control.Heartbeat.getDefaultInstance()) {
          request_ = io.axoniq.axonserver.grpc.control.Heartbeat.newBuilder((io.axoniq.axonserver.grpc.control.Heartbeat) request_)
              .mergeFrom(value).buildPartial();
        } else {
          request_ = value;
        }
        onChanged();
      } else {
        if (requestCase_ == 3) {
          heartbeatBuilder_.mergeFrom(value);
        }
        heartbeatBuilder_.setMessage(value);
      }
      requestCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * This heartbeat is used by AxonServer in order to check if the connection is still alive
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 3;</code>
     */
    public Builder clearHeartbeat() {
      if (heartbeatBuilder_ == null) {
        if (requestCase_ == 3) {
          requestCase_ = 0;
          request_ = null;
          onChanged();
        }
      } else {
        if (requestCase_ == 3) {
          requestCase_ = 0;
          request_ = null;
        }
        heartbeatBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * This heartbeat is used by AxonServer in order to check if the connection is still alive
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 3;</code>
     */
    public io.axoniq.axonserver.grpc.control.Heartbeat.Builder getHeartbeatBuilder() {
      return getHeartbeatFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * This heartbeat is used by AxonServer in order to check if the connection is still alive
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 3;</code>
     */
    public io.axoniq.axonserver.grpc.control.HeartbeatOrBuilder getHeartbeatOrBuilder() {
      if ((requestCase_ == 3) && (heartbeatBuilder_ != null)) {
        return heartbeatBuilder_.getMessageOrBuilder();
      } else {
        if (requestCase_ == 3) {
          return (io.axoniq.axonserver.grpc.control.Heartbeat) request_;
        }
        return io.axoniq.axonserver.grpc.control.Heartbeat.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * This heartbeat is used by AxonServer in order to check if the connection is still alive
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.axoniq.axonserver.grpc.control.Heartbeat, io.axoniq.axonserver.grpc.control.Heartbeat.Builder, io.axoniq.axonserver.grpc.control.HeartbeatOrBuilder> 
        getHeartbeatFieldBuilder() {
      if (heartbeatBuilder_ == null) {
        if (!(requestCase_ == 3)) {
          request_ = io.axoniq.axonserver.grpc.control.Heartbeat.getDefaultInstance();
        }
        heartbeatBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.axoniq.axonserver.grpc.control.Heartbeat, io.axoniq.axonserver.grpc.control.Heartbeat.Builder, io.axoniq.axonserver.grpc.control.HeartbeatOrBuilder>(
                (io.axoniq.axonserver.grpc.control.Heartbeat) request_,
                getParentForChildren(),
                isClean());
        request_ = null;
      }
      requestCase_ = 3;
      onChanged();;
      return heartbeatBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.axoniq.axonserver.grpc.InstructionAck, io.axoniq.axonserver.grpc.InstructionAck.Builder, io.axoniq.axonserver.grpc.InstructionAckOrBuilder> ackBuilder_;
    /**
     * <pre>
     * Acknowledgement of previously sent instruction via outbound stream 
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 4;</code>
     */
    public boolean hasAck() {
      return requestCase_ == 4;
    }
    /**
     * <pre>
     * Acknowledgement of previously sent instruction via outbound stream 
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 4;</code>
     */
    public io.axoniq.axonserver.grpc.InstructionAck getAck() {
      if (ackBuilder_ == null) {
        if (requestCase_ == 4) {
          return (io.axoniq.axonserver.grpc.InstructionAck) request_;
        }
        return io.axoniq.axonserver.grpc.InstructionAck.getDefaultInstance();
      } else {
        if (requestCase_ == 4) {
          return ackBuilder_.getMessage();
        }
        return io.axoniq.axonserver.grpc.InstructionAck.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Acknowledgement of previously sent instruction via outbound stream 
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 4;</code>
     */
    public Builder setAck(io.axoniq.axonserver.grpc.InstructionAck value) {
      if (ackBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        request_ = value;
        onChanged();
      } else {
        ackBuilder_.setMessage(value);
      }
      requestCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Acknowledgement of previously sent instruction via outbound stream 
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 4;</code>
     */
    public Builder setAck(
        io.axoniq.axonserver.grpc.InstructionAck.Builder builderForValue) {
      if (ackBuilder_ == null) {
        request_ = builderForValue.build();
        onChanged();
      } else {
        ackBuilder_.setMessage(builderForValue.build());
      }
      requestCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Acknowledgement of previously sent instruction via outbound stream 
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 4;</code>
     */
    public Builder mergeAck(io.axoniq.axonserver.grpc.InstructionAck value) {
      if (ackBuilder_ == null) {
        if (requestCase_ == 4 &&
            request_ != io.axoniq.axonserver.grpc.InstructionAck.getDefaultInstance()) {
          request_ = io.axoniq.axonserver.grpc.InstructionAck.newBuilder((io.axoniq.axonserver.grpc.InstructionAck) request_)
              .mergeFrom(value).buildPartial();
        } else {
          request_ = value;
        }
        onChanged();
      } else {
        if (requestCase_ == 4) {
          ackBuilder_.mergeFrom(value);
        }
        ackBuilder_.setMessage(value);
      }
      requestCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Acknowledgement of previously sent instruction via outbound stream 
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 4;</code>
     */
    public Builder clearAck() {
      if (ackBuilder_ == null) {
        if (requestCase_ == 4) {
          requestCase_ = 0;
          request_ = null;
          onChanged();
        }
      } else {
        if (requestCase_ == 4) {
          requestCase_ = 0;
          request_ = null;
        }
        ackBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Acknowledgement of previously sent instruction via outbound stream 
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 4;</code>
     */
    public io.axoniq.axonserver.grpc.InstructionAck.Builder getAckBuilder() {
      return getAckFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Acknowledgement of previously sent instruction via outbound stream 
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 4;</code>
     */
    public io.axoniq.axonserver.grpc.InstructionAckOrBuilder getAckOrBuilder() {
      if ((requestCase_ == 4) && (ackBuilder_ != null)) {
        return ackBuilder_.getMessageOrBuilder();
      } else {
        if (requestCase_ == 4) {
          return (io.axoniq.axonserver.grpc.InstructionAck) request_;
        }
        return io.axoniq.axonserver.grpc.InstructionAck.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Acknowledgement of previously sent instruction via outbound stream 
     * </pre>
     *
     * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.axoniq.axonserver.grpc.InstructionAck, io.axoniq.axonserver.grpc.InstructionAck.Builder, io.axoniq.axonserver.grpc.InstructionAckOrBuilder> 
        getAckFieldBuilder() {
      if (ackBuilder_ == null) {
        if (!(requestCase_ == 4)) {
          request_ = io.axoniq.axonserver.grpc.InstructionAck.getDefaultInstance();
        }
        ackBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.axoniq.axonserver.grpc.InstructionAck, io.axoniq.axonserver.grpc.InstructionAck.Builder, io.axoniq.axonserver.grpc.InstructionAckOrBuilder>(
                (io.axoniq.axonserver.grpc.InstructionAck) request_,
                getParentForChildren(),
                isClean());
        request_ = null;
      }
      requestCase_ = 4;
      onChanged();;
      return ackBuilder_;
    }

    private java.lang.Object instructionId_ = "";
    /**
     * <pre>
     * Instruction identifier. If this identifier is set, this instruction will be acknowledged via outbound stream 
     * </pre>
     *
     * <code>string instruction_id = 5;</code>
     */
    public java.lang.String getInstructionId() {
      java.lang.Object ref = instructionId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        instructionId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Instruction identifier. If this identifier is set, this instruction will be acknowledged via outbound stream 
     * </pre>
     *
     * <code>string instruction_id = 5;</code>
     */
    public com.google.protobuf.ByteString
        getInstructionIdBytes() {
      java.lang.Object ref = instructionId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        instructionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Instruction identifier. If this identifier is set, this instruction will be acknowledged via outbound stream 
     * </pre>
     *
     * <code>string instruction_id = 5;</code>
     */
    public Builder setInstructionId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      instructionId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Instruction identifier. If this identifier is set, this instruction will be acknowledged via outbound stream 
     * </pre>
     *
     * <code>string instruction_id = 5;</code>
     */
    public Builder clearInstructionId() {
      
      instructionId_ = getDefaultInstance().getInstructionId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Instruction identifier. If this identifier is set, this instruction will be acknowledged via outbound stream 
     * </pre>
     *
     * <code>string instruction_id = 5;</code>
     */
    public Builder setInstructionIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      instructionId_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:io.axoniq.axonserver.grpc.control.PlatformInboundInstruction)
  }

  // @@protoc_insertion_point(class_scope:io.axoniq.axonserver.grpc.control.PlatformInboundInstruction)
  private static final io.axoniq.axonserver.grpc.control.PlatformInboundInstruction DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.axoniq.axonserver.grpc.control.PlatformInboundInstruction();
  }

  public static io.axoniq.axonserver.grpc.control.PlatformInboundInstruction getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PlatformInboundInstruction>
      PARSER = new com.google.protobuf.AbstractParser<PlatformInboundInstruction>() {
    @java.lang.Override
    public PlatformInboundInstruction parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new PlatformInboundInstruction(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<PlatformInboundInstruction> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PlatformInboundInstruction> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.axoniq.axonserver.grpc.control.PlatformInboundInstruction getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

