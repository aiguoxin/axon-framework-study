// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

package io.axoniq.axonserver.grpc.control;

public interface PlatformInboundInstructionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.axoniq.axonserver.grpc.control.PlatformInboundInstruction)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Information about the client being connected.
   *This information is used by AxonServer to monitor the topology of connected applications.
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.ClientIdentification register = 1;</code>
   */
  boolean hasRegister();
  /**
   * <pre>
   * Information about the client being connected.
   *This information is used by AxonServer to monitor the topology of connected applications.
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.ClientIdentification register = 1;</code>
   */
  io.axoniq.axonserver.grpc.control.ClientIdentification getRegister();
  /**
   * <pre>
   * Information about the client being connected.
   *This information is used by AxonServer to monitor the topology of connected applications.
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.ClientIdentification register = 1;</code>
   */
  io.axoniq.axonserver.grpc.control.ClientIdentificationOrBuilder getRegisterOrBuilder();

  /**
   * <pre>
   * Information about Tracking Processors defined in the application.
   *This information is used by AxonServer to monitor the progress of Tracking Processors across instances.
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;</code>
   */
  boolean hasEventProcessorInfo();
  /**
   * <pre>
   * Information about Tracking Processors defined in the application.
   *This information is used by AxonServer to monitor the progress of Tracking Processors across instances.
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorInfo getEventProcessorInfo();
  /**
   * <pre>
   * Information about Tracking Processors defined in the application.
   *This information is used by AxonServer to monitor the progress of Tracking Processors across instances.
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorInfoOrBuilder getEventProcessorInfoOrBuilder();

  /**
   * <pre>
   * This heartbeat is used by AxonServer in order to check if the connection is still alive
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 3;</code>
   */
  boolean hasHeartbeat();
  /**
   * <pre>
   * This heartbeat is used by AxonServer in order to check if the connection is still alive
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 3;</code>
   */
  io.axoniq.axonserver.grpc.control.Heartbeat getHeartbeat();
  /**
   * <pre>
   * This heartbeat is used by AxonServer in order to check if the connection is still alive
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 3;</code>
   */
  io.axoniq.axonserver.grpc.control.HeartbeatOrBuilder getHeartbeatOrBuilder();

  /**
   * <pre>
   * Acknowledgement of previously sent instruction via outbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 4;</code>
   */
  boolean hasAck();
  /**
   * <pre>
   * Acknowledgement of previously sent instruction via outbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 4;</code>
   */
  io.axoniq.axonserver.grpc.InstructionAck getAck();
  /**
   * <pre>
   * Acknowledgement of previously sent instruction via outbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 4;</code>
   */
  io.axoniq.axonserver.grpc.InstructionAckOrBuilder getAckOrBuilder();

  /**
   * <pre>
   * Instruction identifier. If this identifier is set, this instruction will be acknowledged via outbound stream 
   * </pre>
   *
   * <code>string instruction_id = 5;</code>
   */
  java.lang.String getInstructionId();
  /**
   * <pre>
   * Instruction identifier. If this identifier is set, this instruction will be acknowledged via outbound stream 
   * </pre>
   *
   * <code>string instruction_id = 5;</code>
   */
  com.google.protobuf.ByteString
      getInstructionIdBytes();

  public io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.RequestCase getRequestCase();
}
