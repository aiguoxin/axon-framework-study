// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

package io.axoniq.axonserver.grpc.control;

public interface EventProcessorInfoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.axoniq.axonserver.grpc.control.EventProcessorInfo)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The logical name of this processor. 
   * </pre>
   *
   * <code>string processor_name = 1;</code>
   */
  java.lang.String getProcessorName();
  /**
   * <pre>
   * The logical name of this processor. 
   * </pre>
   *
   * <code>string processor_name = 1;</code>
   */
  com.google.protobuf.ByteString
      getProcessorNameBytes();

  /**
   * <pre>
   * The mode in which this processor is reading Events, for example: 'Tracking' or 'Subscribing' 
   * </pre>
   *
   * <code>string mode = 2;</code>
   */
  java.lang.String getMode();
  /**
   * <pre>
   * The mode in which this processor is reading Events, for example: 'Tracking' or 'Subscribing' 
   * </pre>
   *
   * <code>string mode = 2;</code>
   */
  com.google.protobuf.ByteString
      getModeBytes();

  /**
   * <pre>
   * The number of threads currently actively processing Events 
   * </pre>
   *
   * <code>int32 active_threads = 3;</code>
   */
  int getActiveThreads();

  /**
   * <pre>
   * Flag indicating whether the processor is running 
   * </pre>
   *
   * <code>bool running = 4;</code>
   */
  boolean getRunning();

  /**
   * <pre>
   * Flag indicating whether the processor, when stopped, did so because of an irrecoverable Error 
   * </pre>
   *
   * <code>bool error = 5;</code>
   */
  boolean getError();

  /**
   * <pre>
   * Status details of each of the Segments for which Events are being processed. This is only provided by Tracking
   *Event Processors.
   * </pre>
   *
   * <code>repeated .io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus segment_status = 6;</code>
   */
  java.util.List<io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus> 
      getSegmentStatusList();
  /**
   * <pre>
   * Status details of each of the Segments for which Events are being processed. This is only provided by Tracking
   *Event Processors.
   * </pre>
   *
   * <code>repeated .io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus segment_status = 6;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus getSegmentStatus(int index);
  /**
   * <pre>
   * Status details of each of the Segments for which Events are being processed. This is only provided by Tracking
   *Event Processors.
   * </pre>
   *
   * <code>repeated .io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus segment_status = 6;</code>
   */
  int getSegmentStatusCount();
  /**
   * <pre>
   * Status details of each of the Segments for which Events are being processed. This is only provided by Tracking
   *Event Processors.
   * </pre>
   *
   * <code>repeated .io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus segment_status = 6;</code>
   */
  java.util.List<? extends io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatusOrBuilder> 
      getSegmentStatusOrBuilderList();
  /**
   * <pre>
   * Status details of each of the Segments for which Events are being processed. This is only provided by Tracking
   *Event Processors.
   * </pre>
   *
   * <code>repeated .io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus segment_status = 6;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatusOrBuilder getSegmentStatusOrBuilder(
      int index);

  /**
   * <pre>
   * The number of threads the processor has available to assign to Segments.
   *Will report 0 if all threads are assigned a Segment.
   * </pre>
   *
   * <code>int32 available_threads = 7;</code>
   */
  int getAvailableThreads();
}
