// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query.proto

package io.axoniq.axonserver.grpc.query;

public interface QueryProviderOutboundOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.axoniq.axonserver.grpc.query.QueryProviderOutbound)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Registers a Query Handler with AxonServer 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.query.QuerySubscription subscribe = 1;</code>
   */
  boolean hasSubscribe();
  /**
   * <pre>
   * Registers a Query Handler with AxonServer 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.query.QuerySubscription subscribe = 1;</code>
   */
  io.axoniq.axonserver.grpc.query.QuerySubscription getSubscribe();
  /**
   * <pre>
   * Registers a Query Handler with AxonServer 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.query.QuerySubscription subscribe = 1;</code>
   */
  io.axoniq.axonserver.grpc.query.QuerySubscriptionOrBuilder getSubscribeOrBuilder();

  /**
   * <pre>
   * Unregisters a Query Handler with AxonServer 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.query.QuerySubscription unsubscribe = 2;</code>
   */
  boolean hasUnsubscribe();
  /**
   * <pre>
   * Unregisters a Query Handler with AxonServer 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.query.QuerySubscription unsubscribe = 2;</code>
   */
  io.axoniq.axonserver.grpc.query.QuerySubscription getUnsubscribe();
  /**
   * <pre>
   * Unregisters a Query Handler with AxonServer 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.query.QuerySubscription unsubscribe = 2;</code>
   */
  io.axoniq.axonserver.grpc.query.QuerySubscriptionOrBuilder getUnsubscribeOrBuilder();

  /**
   * <pre>
   * Grant permits to AxonServer to send a number of messages to the client 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.FlowControl flow_control = 3;</code>
   */
  boolean hasFlowControl();
  /**
   * <pre>
   * Grant permits to AxonServer to send a number of messages to the client 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.FlowControl flow_control = 3;</code>
   */
  io.axoniq.axonserver.grpc.FlowControl getFlowControl();
  /**
   * <pre>
   * Grant permits to AxonServer to send a number of messages to the client 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.FlowControl flow_control = 3;</code>
   */
  io.axoniq.axonserver.grpc.FlowControlOrBuilder getFlowControlOrBuilder();

  /**
   * <pre>
   * Sends a Response to a Query received via the inbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.query.QueryResponse query_response = 4;</code>
   */
  boolean hasQueryResponse();
  /**
   * <pre>
   * Sends a Response to a Query received via the inbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.query.QueryResponse query_response = 4;</code>
   */
  io.axoniq.axonserver.grpc.query.QueryResponse getQueryResponse();
  /**
   * <pre>
   * Sends a Response to a Query received via the inbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.query.QueryResponse query_response = 4;</code>
   */
  io.axoniq.axonserver.grpc.query.QueryResponseOrBuilder getQueryResponseOrBuilder();

  /**
   * <pre>
   * Indicator that all responses for Query have been sent 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.query.QueryComplete query_complete = 5;</code>
   */
  boolean hasQueryComplete();
  /**
   * <pre>
   * Indicator that all responses for Query have been sent 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.query.QueryComplete query_complete = 5;</code>
   */
  io.axoniq.axonserver.grpc.query.QueryComplete getQueryComplete();
  /**
   * <pre>
   * Indicator that all responses for Query have been sent 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.query.QueryComplete query_complete = 5;</code>
   */
  io.axoniq.axonserver.grpc.query.QueryCompleteOrBuilder getQueryCompleteOrBuilder();

  /**
   * <pre>
   * Sends a response for a Subscription Query that has been received via the inbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.query.SubscriptionQueryResponse subscription_query_response = 6;</code>
   */
  boolean hasSubscriptionQueryResponse();
  /**
   * <pre>
   * Sends a response for a Subscription Query that has been received via the inbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.query.SubscriptionQueryResponse subscription_query_response = 6;</code>
   */
  io.axoniq.axonserver.grpc.query.SubscriptionQueryResponse getSubscriptionQueryResponse();
  /**
   * <pre>
   * Sends a response for a Subscription Query that has been received via the inbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.query.SubscriptionQueryResponse subscription_query_response = 6;</code>
   */
  io.axoniq.axonserver.grpc.query.SubscriptionQueryResponseOrBuilder getSubscriptionQueryResponseOrBuilder();

  /**
   * <pre>
   * Acknowledgement of previously sent instruction via inbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 7;</code>
   */
  boolean hasAck();
  /**
   * <pre>
   * Acknowledgement of previously sent instruction via inbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 7;</code>
   */
  io.axoniq.axonserver.grpc.InstructionAck getAck();
  /**
   * <pre>
   * Acknowledgement of previously sent instruction via inbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 7;</code>
   */
  io.axoniq.axonserver.grpc.InstructionAckOrBuilder getAckOrBuilder();

  /**
   * <pre>
   * Instruction identifier. If this identifier is set, this instruction will be acknowledged via inbound stream 
   * </pre>
   *
   * <code>string instruction_id = 8;</code>
   */
  java.lang.String getInstructionId();
  /**
   * <pre>
   * Instruction identifier. If this identifier is set, this instruction will be acknowledged via inbound stream 
   * </pre>
   *
   * <code>string instruction_id = 8;</code>
   */
  com.google.protobuf.ByteString
      getInstructionIdBytes();

  public io.axoniq.axonserver.grpc.query.QueryProviderOutbound.RequestCase getRequestCase();
}
