// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto

package io.axoniq.axonserver.grpc.event;

public interface EventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.axoniq.axonserver.grpc.event.Event)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The unique identifier of this event 
   * </pre>
   *
   * <code>string message_identifier = 1;</code>
   */
  java.lang.String getMessageIdentifier();
  /**
   * <pre>
   * The unique identifier of this event 
   * </pre>
   *
   * <code>string message_identifier = 1;</code>
   */
  com.google.protobuf.ByteString
      getMessageIdentifierBytes();

  /**
   * <pre>
   * The identifier of the Aggregate instance that published this event, if any 
   * </pre>
   *
   * <code>string aggregate_identifier = 2;</code>
   */
  java.lang.String getAggregateIdentifier();
  /**
   * <pre>
   * The identifier of the Aggregate instance that published this event, if any 
   * </pre>
   *
   * <code>string aggregate_identifier = 2;</code>
   */
  com.google.protobuf.ByteString
      getAggregateIdentifierBytes();

  /**
   * <pre>
   * The sequence number of the Event in the Aggregate instance that published it, if any 
   * </pre>
   *
   * <code>int64 aggregate_sequence_number = 3;</code>
   */
  long getAggregateSequenceNumber();

  /**
   * <pre>
   * The Type of the Aggregate instance that published this Event, if any 
   * </pre>
   *
   * <code>string aggregate_type = 4;</code>
   */
  java.lang.String getAggregateType();
  /**
   * <pre>
   * The Type of the Aggregate instance that published this Event, if any 
   * </pre>
   *
   * <code>string aggregate_type = 4;</code>
   */
  com.google.protobuf.ByteString
      getAggregateTypeBytes();

  /**
   * <pre>
   * The timestamp of the Event 
   * </pre>
   *
   * <code>int64 timestamp = 5;</code>
   */
  long getTimestamp();

  /**
   * <pre>
   * The Payload of the Event 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.SerializedObject payload = 6;</code>
   */
  boolean hasPayload();
  /**
   * <pre>
   * The Payload of the Event 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.SerializedObject payload = 6;</code>
   */
  io.axoniq.axonserver.grpc.SerializedObject getPayload();
  /**
   * <pre>
   * The Payload of the Event 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.SerializedObject payload = 6;</code>
   */
  io.axoniq.axonserver.grpc.SerializedObjectOrBuilder getPayloadOrBuilder();

  /**
   * <pre>
   * The Meta Data of the Event 
   * </pre>
   *
   * <code>map&lt;string, .io.axoniq.axonserver.grpc.MetaDataValue&gt; meta_data = 7;</code>
   */
  int getMetaDataCount();
  /**
   * <pre>
   * The Meta Data of the Event 
   * </pre>
   *
   * <code>map&lt;string, .io.axoniq.axonserver.grpc.MetaDataValue&gt; meta_data = 7;</code>
   */
  boolean containsMetaData(
      java.lang.String key);
  /**
   * Use {@link #getMetaDataMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.axoniq.axonserver.grpc.MetaDataValue>
  getMetaData();
  /**
   * <pre>
   * The Meta Data of the Event 
   * </pre>
   *
   * <code>map&lt;string, .io.axoniq.axonserver.grpc.MetaDataValue&gt; meta_data = 7;</code>
   */
  java.util.Map<java.lang.String, io.axoniq.axonserver.grpc.MetaDataValue>
  getMetaDataMap();
  /**
   * <pre>
   * The Meta Data of the Event 
   * </pre>
   *
   * <code>map&lt;string, .io.axoniq.axonserver.grpc.MetaDataValue&gt; meta_data = 7;</code>
   */

  io.axoniq.axonserver.grpc.MetaDataValue getMetaDataOrDefault(
      java.lang.String key,
      io.axoniq.axonserver.grpc.MetaDataValue defaultValue);
  /**
   * <pre>
   * The Meta Data of the Event 
   * </pre>
   *
   * <code>map&lt;string, .io.axoniq.axonserver.grpc.MetaDataValue&gt; meta_data = 7;</code>
   */

  io.axoniq.axonserver.grpc.MetaDataValue getMetaDataOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Flag indicating whether the Event is a snapshot Event 
   * </pre>
   *
   * <code>bool snapshot = 8;</code>
   */
  boolean getSnapshot();
}
