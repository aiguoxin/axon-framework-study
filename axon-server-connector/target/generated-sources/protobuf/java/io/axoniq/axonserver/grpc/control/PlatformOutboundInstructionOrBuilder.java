// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

package io.axoniq.axonserver.grpc.control;

public interface PlatformOutboundInstructionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Information provided by AxonServer which provides information about the AxonServer node the application is connected with 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.NodeInfo node_notification = 1;</code>
   */
  boolean hasNodeNotification();
  /**
   * <pre>
   * Information provided by AxonServer which provides information about the AxonServer node the application is connected with 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.NodeInfo node_notification = 1;</code>
   */
  io.axoniq.axonserver.grpc.control.NodeInfo getNodeNotification();
  /**
   * <pre>
   * Information provided by AxonServer which provides information about the AxonServer node the application is connected with 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.NodeInfo node_notification = 1;</code>
   */
  io.axoniq.axonserver.grpc.control.NodeInfoOrBuilder getNodeNotificationOrBuilder();

  /**
   * <pre>
   * A request from AxonServer to the Application to migrate its connection to another node.
   *Clients SHOULD honor this request by closing their current connection, and using the GetPlatformServer RPC
   *to request a new destination.
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.RequestReconnect request_reconnect = 3;</code>
   */
  boolean hasRequestReconnect();
  /**
   * <pre>
   * A request from AxonServer to the Application to migrate its connection to another node.
   *Clients SHOULD honor this request by closing their current connection, and using the GetPlatformServer RPC
   *to request a new destination.
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.RequestReconnect request_reconnect = 3;</code>
   */
  io.axoniq.axonserver.grpc.control.RequestReconnect getRequestReconnect();
  /**
   * <pre>
   * A request from AxonServer to the Application to migrate its connection to another node.
   *Clients SHOULD honor this request by closing their current connection, and using the GetPlatformServer RPC
   *to request a new destination.
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.RequestReconnect request_reconnect = 3;</code>
   */
  io.axoniq.axonserver.grpc.control.RequestReconnectOrBuilder getRequestReconnectOrBuilder();

  /**
   * <pre>
   * Instruction from AxonServer to Pause a Tracking Event Processor. 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorReference pause_event_processor = 4;</code>
   */
  boolean hasPauseEventProcessor();
  /**
   * <pre>
   * Instruction from AxonServer to Pause a Tracking Event Processor. 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorReference pause_event_processor = 4;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorReference getPauseEventProcessor();
  /**
   * <pre>
   * Instruction from AxonServer to Pause a Tracking Event Processor. 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorReference pause_event_processor = 4;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorReferenceOrBuilder getPauseEventProcessorOrBuilder();

  /**
   * <pre>
   * Instruction from AxonServer to Start a Tracking Event Processor. 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorReference start_event_processor = 5;</code>
   */
  boolean hasStartEventProcessor();
  /**
   * <pre>
   * Instruction from AxonServer to Start a Tracking Event Processor. 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorReference start_event_processor = 5;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorReference getStartEventProcessor();
  /**
   * <pre>
   * Instruction from AxonServer to Start a Tracking Event Processor. 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorReference start_event_processor = 5;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorReferenceOrBuilder getStartEventProcessorOrBuilder();

  /**
   * <pre>
   * Instruction from AxonServer to Release a specific segment in a Tracking Event Processor 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference release_segment = 6;</code>
   */
  boolean hasReleaseSegment();
  /**
   * <pre>
   * Instruction from AxonServer to Release a specific segment in a Tracking Event Processor 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference release_segment = 6;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference getReleaseSegment();
  /**
   * <pre>
   * Instruction from AxonServer to Release a specific segment in a Tracking Event Processor 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference release_segment = 6;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorSegmentReferenceOrBuilder getReleaseSegmentOrBuilder();

  /**
   * <pre>
   * A request from AxonServer for status information of a specific Tracking Event Processor 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorReference request_event_processor_info = 7;</code>
   */
  boolean hasRequestEventProcessorInfo();
  /**
   * <pre>
   * A request from AxonServer for status information of a specific Tracking Event Processor 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorReference request_event_processor_info = 7;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorReference getRequestEventProcessorInfo();
  /**
   * <pre>
   * A request from AxonServer for status information of a specific Tracking Event Processor 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorReference request_event_processor_info = 7;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorReferenceOrBuilder getRequestEventProcessorInfoOrBuilder();

  /**
   * <pre>
   * Instruction to split a Segment in a Tracking Event Processor 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference split_event_processor_segment = 8;</code>
   */
  boolean hasSplitEventProcessorSegment();
  /**
   * <pre>
   * Instruction to split a Segment in a Tracking Event Processor 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference split_event_processor_segment = 8;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference getSplitEventProcessorSegment();
  /**
   * <pre>
   * Instruction to split a Segment in a Tracking Event Processor 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference split_event_processor_segment = 8;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorSegmentReferenceOrBuilder getSplitEventProcessorSegmentOrBuilder();

  /**
   * <pre>
   * Instruction to merge two Segments in a Tracking Event Processor 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference merge_event_processor_segment = 9;</code>
   */
  boolean hasMergeEventProcessorSegment();
  /**
   * <pre>
   * Instruction to merge two Segments in a Tracking Event Processor 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference merge_event_processor_segment = 9;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference getMergeEventProcessorSegment();
  /**
   * <pre>
   * Instruction to merge two Segments in a Tracking Event Processor 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference merge_event_processor_segment = 9;</code>
   */
  io.axoniq.axonserver.grpc.control.EventProcessorSegmentReferenceOrBuilder getMergeEventProcessorSegmentOrBuilder();

  /**
   * <pre>
   * This heartbeat is used by AxonFramework in order to check if the connection is still alive
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 10;</code>
   */
  boolean hasHeartbeat();
  /**
   * <pre>
   * This heartbeat is used by AxonFramework in order to check if the connection is still alive
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 10;</code>
   */
  io.axoniq.axonserver.grpc.control.Heartbeat getHeartbeat();
  /**
   * <pre>
   * This heartbeat is used by AxonFramework in order to check if the connection is still alive
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.control.Heartbeat heartbeat = 10;</code>
   */
  io.axoniq.axonserver.grpc.control.HeartbeatOrBuilder getHeartbeatOrBuilder();

  /**
   * <pre>
   * Acknowledgement of previously sent instruction via inbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 11;</code>
   */
  boolean hasAck();
  /**
   * <pre>
   * Acknowledgement of previously sent instruction via inbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 11;</code>
   */
  io.axoniq.axonserver.grpc.InstructionAck getAck();
  /**
   * <pre>
   * Acknowledgement of previously sent instruction via inbound stream 
   * </pre>
   *
   * <code>.io.axoniq.axonserver.grpc.InstructionAck ack = 11;</code>
   */
  io.axoniq.axonserver.grpc.InstructionAckOrBuilder getAckOrBuilder();

  /**
   * <pre>
   * Instruction identifier. If this identifier is set, this instruction will be acknowledged via inbound stream 
   * </pre>
   *
   * <code>string instruction_id = 12;</code>
   */
  java.lang.String getInstructionId();
  /**
   * <pre>
   * Instruction identifier. If this identifier is set, this instruction will be acknowledged via inbound stream 
   * </pre>
   *
   * <code>string instruction_id = 12;</code>
   */
  com.google.protobuf.ByteString
      getInstructionIdBytes();

  public io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.RequestCase getRequestCase();
}
